events {}

http {
    # Define the "upstream" services. Docker Compose makes your services
    # available by their service name as a hostname.
    upstream users_service {
        server users_service:8000;
    }

    upstream recipes_service {
        server recipes_service:8000;
    }

    # The main server block that listens for incoming connections.
    server {
        listen 80; # Listen on port 80, which we exposed in docker-compose.

        # --- Routing Rule for Users Service ---
        # Public user endpoints (register, token) are forwarded directly.
        location /api/user/ {
            proxy_pass http://users_service;

            # Set headers to pass along original request info
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- Routing Rule for Recipes Service ---
        # Protect recipe endpoints with internal auth subrequest.
        location /api/recipe/ {
            # Ask internal location /_verify_auth to validate the token.
            auth_request /_verify_auth;

            # Capture the X-User-ID header set by the subrequest and forward it
            # to the upstream recipe service so it can use it as the authenticated user.
            auth_request_set $auth_user_id $upstream_http_x_user_id;

            proxy_pass http://recipes_service;

            # Forward the authenticated user id to upstream
            proxy_set_header X-User-ID $auth_user_id;

            # Set other headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # This is an internal-only location used by auth_request.
        location /_verify_auth {
            internal; # Prevents users from calling this directly
            # Path to the users service verify endpoint; it returns
            # 200 on success and sets the X-User-ID header with the user's id.
            proxy_pass http://users_service/api/user/verify-token;
            proxy_pass_request_body off; # Don't send the original request body
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }
    }
}
